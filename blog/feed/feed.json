{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Andrew Leedham",
  "language": "en",
  "home_page_url": "https://www.andrewleedham.me",
  "feed_url": "https://andrewleedham.me/blog/feed/feed.json",
  "description": "Mostly web development stuff.",
  "author": {
    "name": "Andrew Leedham",
    "url": "https://www.andrewleedham.me"
  },
  "items": [{
      "id": "https://www.andrewleedham.me/blog/posts/native-macos-vscode-tabs/",
      "url": "https://www.andrewleedham.me/blog/posts/native-macos-vscode-tabs/",
      "title": "Did you know about native macOS tabs in vscode?",
      "content_html": "<p>I was trawling through the vscode options the other day looking for some window resizing stuff, and found an option entitled &quot;Native Tabs&quot;. Being a curious sort I enabled it and was surprised to see that all my separate open windows were now combined into 1 with native tabs across the top to navigate between them. This in my opinion is a much better way of displaying multiple projects than workspace folders. You even get a nice little + icon for opening new projects.</p>\n<p><img src=\"https://www.andrewleedham.me/img/native-macos-vscode-tabs.webp\" alt=\"A screenshot of vscode's menu bar with native macOS tabs enabled\" /></p>\n<h2 id=\"enabling-native-tabs\" tabindex=\"-1\">Enabling Native Tabs <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/native-macos-vscode-tabs/#enabling-native-tabs\" aria-hidden=\"true\">#</a></h2>\n<p>Just like any other option it is available in the GUI settings or the JSON file settings. Accessible by pressing <kbd>cmd + ,</kbd> or via the menu with 'Code -&gt; Preferences -&gt; Settings'. The option you are looking for is under &quot;Window&quot; entitled &quot;Native Tabs&quot;.</p>\n<p><img src=\"https://www.andrewleedham.me/img/native-macos-vscode-tabs-options.webp\" alt=\"A screenshot of vscode's native tabs option in the settings menu\" /></p>\n<p>If you prefer you could just add the following to your <code>settings.json</code> file:</p>\n<pre class=\"shiki dark-plus\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: undefined\">  \"window.nativeTabs\": true</span></div></code></div></pre>\n",
      "date_published": "2022-11-18T00:00:00Z"
    },{
      "id": "https://www.andrewleedham.me/blog/posts/optimising-icon-loading-with-storybook-and-vite/",
      "url": "https://www.andrewleedham.me/blog/posts/optimising-icon-loading-with-storybook-and-vite/",
      "title": "How I optimised icon loading in Storybook and Vite",
      "content_html": "<h2 id=\"the-problem\" tabindex=\"-1\">The Problem <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/optimising-icon-loading-with-storybook-and-vite/#the-problem\" aria-hidden=\"true\">#</a></h2>\n<p>For the purposes of this blog post the <a href=\"https://storybook.js.org/\">Storybook</a> in question is a React based component library using <a href=\"https://vitejs.dev/\">Vite</a> as the <a href=\"https://github.com/storybookjs/builder-vite\">Storybook builder</a>. It is unfortunately closed source, but I will provide some working code based on it in this blog post. The icons are each their own React components along the lines of:</p>\n<div style=\"display: none\">\n<pre><code class=\"language-twoslash\">// @filename: IconBase.tsx\nimport React from &quot;react&quot;;\nexport type IconProps = Omit&lt;JSX.IntrinsicElements[&quot;svg&quot;], 'ref'&gt;;\n\nexport default function IconBase(props: IconProps) {\n  const { children, ...rest } = props;\n  return (\n    &lt;svg viewBox=&quot;...&quot; width=&quot;..&quot; height=&quot;..&quot; {...props}&gt;\n      {children}\n    &lt;/svg&gt;\n  );\n}\n</code></pre>\n<pre><code class=\"language-twoslash\">// @filename: IconBase.tsx\nimport React from &quot;react&quot;;\nexport type IconProps = Omit&lt;JSX.IntrinsicElements[&quot;svg&quot;], 'ref'&gt;;\n\nexport default function IconBase(props: IconProps) {\n  const { children, ...rest } = props;\n  return (\n    &lt;svg viewBox=&quot;...&quot; width=&quot;..&quot; height=&quot;..&quot; {...props}&gt;\n      {children}\n    &lt;/svg&gt;\n  );\n}\n// ---cut---\n// @filename: icons/LightBulb.tsx\nimport React from &quot;react&quot;;\nimport IconBase, { IconProps } from &quot;../IconBase&quot;;\n\nexport default function LightBulbIcon(props: IconProps) {\n  return (\n    &lt;IconBase&gt;\n      &lt;path d=&quot;...&quot;&gt;&lt;/path&gt;\n    &lt;/IconBase&gt;\n  );\n}\n</code></pre>\n<pre><code class=\"language-twoslash\">// @filename: IconBase.tsx\nimport React from &quot;react&quot;;\nexport type IconProps = Omit&lt;JSX.IntrinsicElements[&quot;svg&quot;], 'ref'&gt;;\n\nexport default function IconBase(props: IconProps) {\n  const { children, ...rest } = props;\n  return (\n    &lt;svg viewBox=&quot;...&quot; width=&quot;..&quot; height=&quot;..&quot; {...props}&gt;\n      {children}\n    &lt;/svg&gt;\n  );\n}\n// @filename: useIcon.tsx\n/// &lt;reference types=&quot;vite/client&quot; /&gt;\nfunction getIconPathFromName(iconName: string): string {\n  return iconName;\n}\n// ---cut---\nimport React from &quot;react&quot;;\nimport IconBase from &quot;./IconBase&quot;;\n\nconst icons = import.meta.glob&lt;{ default: typeof IconBase }&gt;(&quot;./icons/*.tsx&quot;);\n\nexport default function useIcon(\n  iconName: string | undefined\n): React.LazyExoticComponent&lt;typeof IconBase&gt; | undefined {\n  if (iconName) {\n    const iconPath = getIconPathFromName(iconName);\n    const iconModule = icons[iconPath];\n    if (iconModule) {\n      return React.lazy(iconModule);\n    }\n  }\n}\n\nexport const iconNames = Object.keys(icons);\n</code></pre>\n</div>\n<pre class=\"shiki dark-plus twoslash lsp\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">tsx</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #6A9955\">// @filename: icons/LightBulb.tsx</span></div><div class=\"line\"><span style=\"color: #C586C0\">import</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) namespace React&#10;import React\">React</data-lsp></span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">from</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"react\"</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #C586C0\">import</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) function IconBase(props: IconProps): JSX.Element&#10;import IconBase\">IconBase</data-lsp></span><span style=\"color: #D4D4D4\">, { </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) type IconProps = {&#10;    string?: string | number | undefined;&#10;    className?: string | undefined;&#10;    color?: string | undefined;&#10;    height?: string | number | undefined;&#10;    id?: string | undefined;&#10;    lang?: string | undefined;&#10;    ... 463 more ...;&#10;    key?: React.Key | ... 1 more ... | undefined;&#10;}&#10;import IconProps\">IconProps</data-lsp></span><span style=\"color: #D4D4D4\"> } </span><span style=\"color: #C586C0\">from</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"../IconBase\"</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #C586C0\">export</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">function</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"function LightBulbIcon(props: IconProps): JSX.Element\">LightBulbIcon</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) props: IconProps\">props</data-lsp></span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"(alias) type IconProps = {&#10;    string?: string | number | undefined;&#10;    className?: string | undefined;&#10;    color?: string | undefined;&#10;    height?: string | number | undefined;&#10;    id?: string | undefined;&#10;    lang?: string | undefined;&#10;    ... 463 more ...;&#10;    key?: React.Key | ... 1 more ... | undefined;&#10;}&#10;import IconProps\">IconProps</data-lsp></span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> (</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"(alias) function IconBase(props: IconProps): JSX.Element&#10;import IconBase\">IconBase</data-lsp></span><span style=\"color: #808080\">&gt;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\"><data-lsp lsp=\"(property) JSX.IntrinsicElements.path: React.SVGProps&lt;SVGPathElement>\">path</data-lsp></span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) React.SVGAttributes&lt;T>.d?: string | undefined\">d</data-lsp></span><span style=\"color: #D4D4D4\">=</span><span style=\"color: #CE9178\">\"...\"</span><span style=\"color: #808080\">&gt;&lt;/</span><span style=\"color: #569CD6\"><data-lsp lsp=\"(property) JSX.IntrinsicElements.path: React.SVGProps&lt;SVGPathElement>\">path</data-lsp></span><span style=\"color: #808080\">&gt;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"(alias) function IconBase(props: IconProps): JSX.Element&#10;import IconBase\">IconBase</data-lsp></span><span style=\"color: #808080\">&gt;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  );</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">}</span></div></code></div></pre>\n<p>All of the 200+ icons are then re-exported from a single index file like so:</p>\n<pre class=\"shiki dark-plus\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">typescript</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #6A9955\">// @filename: index.tsx</span></div><div class=\"line\"><span style=\"color: #C586C0\">export</span><span style=\"color: #D4D4D4\"> { </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">as</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">LightBulbIcon</span><span style=\"color: #D4D4D4\"> } </span><span style=\"color: #C586C0\">from</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"./icons/LightBulb\"</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #6A9955\">// ...</span></div></code></div></pre>\n<p>I am aware there are better ways of doing icons in React land, this project is a little special in that React is never run on the client, but that is beside the point. The problem here is with the way Vite works in a dev environment, it does not bundle source code, it does an HTTP request for every import and runs esbuild on each file to compile away TypeScript and JSX. This means that if we use a single icon from the index file it makes 200+ HTTP requests, which as you can imagine is a lot of overhead and very slow. So I started looking for solutions.</p>\n<h2 id=\"initial-findings\" tabindex=\"-1\">Initial findings <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/optimising-icon-loading-with-storybook-and-vite/#initial-findings\" aria-hidden=\"true\">#</a></h2>\n<p>The first place I looked was the Vite docs, as I find them to be a great example of documentation and very easy to read. I quickly came across <a href=\"https://vitejs.dev/guide/dep-pre-bundling.html#dependency-pre-bundling\">&quot;Dependency Pre-Bundling&quot;</a> which sounded like exactly what I need. It even speaks about the exact issue I am having &quot;Some packages ship their ES modules builds as many separate files importing one another.&quot;. So I started messing around with the <code>optimizeDeps</code> option, trying to get it to bundle my index file. This proved difficult, I could not get it to bundle the file no matter how I formatted the paths. It then occurred to me that all the docs on this subject are talking about <code>node_modules</code> or linked dependencies. So I did the next logical step and set up an alias to trick Vite into thinking it was a <code>node_module</code>, this still didn't seem to work, I can only assume Vite is very aware of what is source code and what isn't. So I had to come up with something else.</p>\n<h2 id=\"a-three-pronged-approach\" tabindex=\"-1\">A three-pronged approach <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/optimising-icon-loading-with-storybook-and-vite/#a-three-pronged-approach\" aria-hidden=\"true\">#</a></h2>\n<p>After getting on with some other work, I thought about how I might solve this issue in the background. I eventually settled on a three-pronged attack on icons across the board.</p>\n<h3 id=\"one:-direct-imports\" tabindex=\"-1\">One: Direct imports <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/optimising-icon-loading-with-storybook-and-vite/#one:-direct-imports\" aria-hidden=\"true\">#</a></h3>\n<p>Components that consume icons as a one-off can simply import the raw file, not the index. This means it will only load what it needs for each of these components.</p>\n<h3 id=\"two:-lazy-loaded-modules\" tabindex=\"-1\">Two: Lazy-loaded modules <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/optimising-icon-loading-with-storybook-and-vite/#two:-lazy-loaded-modules\" aria-hidden=\"true\">#</a></h3>\n<p>For stories that have a control for the currently shown icon, we will dynamically import each of the icons, so they aren't requested until selected. This was surprisingly simple with Vite's <code>import.meta.glob</code> API and the <code>React.lazy</code> API. It looks something like this:</p>\n<pre class=\"shiki dark-plus twoslash lsp\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">tsx</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #C586C0\">import</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) namespace React&#10;import React\">React</data-lsp></span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">from</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"react\"</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #C586C0\">import</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) function IconBase(props: IconProps): JSX.Element&#10;import IconBase\">IconBase</data-lsp></span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">from</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"./IconBase\"</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\"><data-lsp lsp=\"const icons: Record&lt;string, () => Promise&lt;{&#10;    default: typeof IconBase;&#10;}>>\">icons</data-lsp></span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">import</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"\" style=\"border-bottom: solid 2px lightgrey;\">meta</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(property) ImportMeta.glob: ImportGlobFunction&#10;&lt;{&#10;    default: typeof IconBase;&#10;}>(glob: string | string[], options?: ImportGlobOptions&lt;false, string> | undefined) => Record&lt;string, () => Promise&lt;{&#10;    default: typeof IconBase;&#10;}>> (+2 overloads)\">glob</data-lsp></span><span style=\"color: #D4D4D4\">&lt;{ </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) default: (props: IconProps) => JSX.Element\">default</data-lsp></span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #569CD6\">typeof</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) function IconBase(props: IconProps): JSX.Element&#10;import IconBase\">IconBase</data-lsp></span><span style=\"color: #D4D4D4\"> }&gt;(</span><span style=\"color: #CE9178\">\"./icons/*.tsx\"</span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #C586C0\">export</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">function</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"function useIcon(iconName: string | undefined): React.LazyExoticComponent&lt;typeof IconBase> | undefined\">useIcon</data-lsp></span><span style=\"color: #D4D4D4\">(</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) iconName: string | undefined\">iconName</data-lsp></span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> | </span><span style=\"color: #4EC9B0\">undefined</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">): </span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"(alias) namespace React&#10;import React\">React</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"type React.LazyExoticComponent&lt;T extends React.ComponentType&lt;any>> = React.ExoticComponent&lt;React.ComponentPropsWithRef&lt;T>> &amp; {&#10;    readonly _result: T;&#10;}\">LazyExoticComponent</data-lsp></span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #569CD6\">typeof</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) function IconBase(props: IconProps): JSX.Element&#10;import IconBase\">IconBase</data-lsp></span><span style=\"color: #D4D4D4\">&gt; | </span><span style=\"color: #4EC9B0\">undefined</span><span style=\"color: #D4D4D4\"> {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) iconName: string | undefined\">iconName</data-lsp></span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\"><data-lsp lsp=\"const iconPath: string\">iconPath</data-lsp></span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"function getIconPathFromName(iconName: string): string\">getIconPathFromName</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) iconName: string\">iconName</data-lsp></span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\"><data-lsp lsp=\"const iconModule: () => Promise&lt;{&#10;    default: (props: IconProps) => JSX.Element;&#10;}>\">iconModule</data-lsp></span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"const icons: Record&lt;string, () => Promise&lt;{&#10;    default: (props: IconProps) => JSX.Element;&#10;}>>\">icons</data-lsp></span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"const iconPath: string\">iconPath</data-lsp></span><span style=\"color: #D4D4D4\">];</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"const iconModule: () => Promise&lt;{&#10;    default: (props: IconProps) => JSX.Element;&#10;}>\">iconModule</data-lsp></span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) namespace React&#10;import React\">React</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"function React.lazy&lt;(props: IconProps) => JSX.Element>(factory: () => Promise&lt;{&#10;    default: (props: IconProps) => JSX.Element;&#10;}>): React.LazyExoticComponent&lt;(props: IconProps) => JSX.Element>\">lazy</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"const iconModule: () => Promise&lt;{&#10;    default: (props: IconProps) => JSX.Element;&#10;}>\">iconModule</data-lsp></span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    }</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  }</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">}</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #C586C0\">export</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\"><data-lsp lsp=\"const iconNames: string[]\">iconNames</data-lsp></span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"var Object: ObjectConstructor\">Object</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(method) ObjectConstructor.keys(o: {}): string[] (+1 overload)\">keys</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"const icons: Record&lt;string, () => Promise&lt;{&#10;    default: typeof IconBase;&#10;}>>\">icons</data-lsp></span><span style=\"color: #D4D4D4\">);</span></div></code></div></pre>\n<p>This gives us a hook that returns a lazy component or undefined given an icon name. We can then use it in our stories file:</p>\n<pre class=\"shiki dark-plus twoslash lsp\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">tsx</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #6A9955\">// @fil<data-lsp lsp=\"(alias) namespace React&#10;import React\">ename</data-lsp>: Icon.stories.tsx</span></div><div class=\"line\"><span style=\"color: #C586C0\">import</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">React</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">from</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"react\"</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #C586C0\">import</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">IconBase</span><span style=\"color: #D4D4D4\">, { </span><span style=\"color: #9CDCFE\">IconProps</span><span style=\"color: #D4D4D4\"> } </span><span style=\"color: #C586C0\">from</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"./IconBase\"</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #C586C0\">import</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">useIcon</span><span style=\"color: #D4D4D4\">, { </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"\" style=\"border-bottom: solid 2px lightgrey;\"></data-lsp>iconNames</span><span style=\"color: #D4D4D4\"> } </span><span style=\"color: #C586C0\">from</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"./useIcon\"</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #C586C0\">import</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">type</span><span style=\"color: #D4D4D4\"> { </span><span style=\"color: #9CDCFE\">StoryFn</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">ComponentMeta</span><span style=\"color: #D4D4D4\"> } </span><span style=\"color: #C586C0\">from</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"@storybook/react\"</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #C586C0\">export</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) namespace React&#10;import React\"></data-lsp>title:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"Icon\"</span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">component:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">IconBase</span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">argTypes:</span><span style=\"color: #D4D4D4\"> {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">icon:</span><span style=\"color: #D4D4D4\"> {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #9CDCFE\">options:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">iconNames</span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #9CDCFE\">control:</span><span style=\"color: #D4D4D4\"> {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">type:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"select\"</span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">      },</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    },</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  },</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">} </span><span style=\"color: #C586C0\">as</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ComponentMeta</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #569CD6\">typeof</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">IconBase</span><span style=\"color: #D4D4D4\">&gt;;</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Template</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #4EC9B0\">StoryFn</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">IconProps</span><span style=\"color: #D4D4D4\"> & { </span><span style=\"color: #9CDCFE\">icon</span><span style=\"color: #D4D4D4\">?: </span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> }&gt; = (</span><span style=\"color: #9CDCFE\">args</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">=&gt;</span><span style=\"color: #D4D4D4\"> {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> { </span><span style=\"color: #4FC1FF\">icon</span><span style=\"color: #D4D4D4\">, ...</span><span style=\"color: #4FC1FF\">props</span><span style=\"color: #D4D4D4\"> } = </span><span style=\"color: #9CDCFE\">args</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\">Icon</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">useIcon</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">icon</span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">Icon</span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #808080\">&lt;&gt;&lt;/&gt;</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  }</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #4EC9B0\">Icon</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">{</span><span style=\"color: #D4D4D4\">...</span><span style=\"color: #9CDCFE\">props</span><span style=\"color: #569CD6\">}</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #808080\">/&gt;</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">};</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #C586C0\">export</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\">Default</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">Template</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">bind</span><span style=\"color: #D4D4D4\">({});</span></div><div class=\"line\"><span style=\"color: #9CDCFE\">Default</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">args</span><span style=\"color: #D4D4D4\"> = {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">icon:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">&quot;LightBulbIcon&quot;<data-lsp lsp=\"(property) type: string\"></data-lsp></span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">};</span></div></code></div></pre>\n<p>Now when a user selects an icon name from the icon control in the Storybook interface, React will dynamically import the appropriate icon module and render it when it is available. Meaning only the default selected icon is loaded at runtime.</p>\n<h3 id=\"three:-all-icon-reference\" tabindex=\"-1\">Three: All Icon Reference <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/optimising-icon-loading-with-storybook-and-vite/#three:-all-icon-reference\" aria-hidden=\"true\">#</a></h3>\n<p>For stories or documentation that show all the icons next to each other for reference, we still have the original issue. Since my previous attempts failed, I decided to go down a level of abstraction and write a plugin (at this point I just wanted things to work). Thankfully, Vite uses a plugin architecture borrowed from Rollup, which I have had a fair amount of experience writing in the past. Furthermore, we know it uses esbuild to transpile source code on the fly, so why not just do that for our index file. Below is roughly what the plugin looks like:</p>\n<pre class=\"shiki dark-plus twoslash lsp\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">typescript</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #C586C0\">import</span><span style=\"color: #D4D4D4\"> { </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) interface Plugin&#10;import Plugin\">Plugin</data-lsp></span><span style=\"color: #D4D4D4\"> } </span><span style=\"color: #C586C0\">from</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"vite\"</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #C586C0\">import</span><span style=\"color: #D4D4D4\"> { </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) function build(options: BuildOptions &amp; {&#10;    write: false;&#10;}): Promise&lt;BuildResult &amp; {&#10;    outputFiles: OutputFile[];&#10;}> (+4 overloads)&#10;import build\">build</data-lsp></span><span style=\"color: #D4D4D4\"> } </span><span style=\"color: #C586C0\">from</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"esbuild\"</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #C586C0\">import</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">as</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) namespace path&#10;(alias) const path: PlatformPath&#10;import path\">path</data-lsp></span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">from</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"path\"</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #C586C0\">export</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">function</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"function bundleIconsPlugin(): Plugin\">bundleIconsPlugin</data-lsp></span><span style=\"color: #D4D4D4\">(): </span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"(alias) interface Plugin&#10;import Plugin\">Plugin</data-lsp></span><span style=\"color: #D4D4D4\"> {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">let</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"let command: string\">command</data-lsp></span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) Plugin.name: string\">name</data-lsp>:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"bundle-icons\"</span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(property) Plugin_2.config?: ((config: UserConfig, env: ConfigEnv) => void | UserConfig | Promise&lt;void | UserConfig | null> | null) | undefined\">config</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) config: UserConfig\">config</data-lsp></span><span style=\"color: #D4D4D4\">, { </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) ConfigEnv.command: &quot;build&quot; | &quot;serve&quot;\">command</data-lsp></span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) _command: &quot;build&quot; | &quot;serve&quot;\">_command</data-lsp></span><span style=\"color: #D4D4D4\"> }) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"let command: string\">command</data-lsp></span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) _command: &quot;build&quot; | &quot;serve&quot;\">_command</data-lsp></span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    },</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">async</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(property) Plugin_2.load?: ((this: PluginContext, id: string, options?: {&#10;    ssr?: boolean | undefined;&#10;} | undefined) => LoadResult | Promise&lt;LoadResult>) | undefined\">load</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) id: string\">id</data-lsp></span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #6A9955\">// Check we are serving, as this is a development mode optimisation.</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #6A9955\">// Also check we are loading the index file.</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"let command: string\">command</data-lsp></span><span style=\"color: #D4D4D4\"> === </span><span style=\"color: #CE9178\">\"serve\"</span><span style=\"color: #D4D4D4\"> && </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) id: string\">id</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(method) String.endsWith(searchString: string, endPosition?: number | undefined): boolean\">endsWith</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"/Icon/index.tsx\"</span><span style=\"color: #D4D4D4\">)) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> { </span><span style=\"color: #4FC1FF\"><data-lsp lsp=\"const outputFiles: OutputFile[]\">outputFiles</data-lsp></span><span style=\"color: #D4D4D4\"> } = </span><span style=\"color: #C586C0\">await</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(alias) build(options: BuildOptions &amp; {&#10;    write: false;&#10;}): Promise&lt;BuildResult &amp; {&#10;    outputFiles: OutputFile[];&#10;}> (+4 overloads)&#10;import build\">build</data-lsp></span><span style=\"color: #D4D4D4\">({</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) BuildOptions.entryPoints?: string[] | Record&lt;string, string> | undefined\">entryPoints</data-lsp>:</span><span style=\"color: #D4D4D4\"> [</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) id: string\">id</data-lsp></span><span style=\"color: #D4D4D4\">],</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) BuildOptions.bundle?: boolean | undefined\">bundle</data-lsp>:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) BuildOptions.platform?: Platform | undefined\">platform</data-lsp>:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"browser\"</span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) write: false\">write</data-lsp>:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">false</span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) CommonOptions.jsx?: &quot;transform&quot; | &quot;preserve&quot; | undefined\">jsx</data-lsp>:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"preserve\"</span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) BuildOptions.absWorkingDir?: string | undefined\">absWorkingDir</data-lsp>:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"var process: NodeJS.Process\">process</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(method) NodeJS.Process.cwd(): string\">cwd</data-lsp></span><span style=\"color: #D4D4D4\">(),</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) CommonOptions.format?: Format | undefined\">format</data-lsp>:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"esm\"</span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #6A9955\">// We also need a custom esbuild plugin because we want to treat everything as</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #6A9955\">// external apart from our individual icon files.</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) BuildOptions.plugins?: Plugin[] | undefined\">plugins</data-lsp>:</span><span style=\"color: #D4D4D4\"> [</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">            {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">              </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) Plugin.name: string\">name</data-lsp>:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"externals\"</span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">              </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(property) Plugin.setup: (build: PluginBuild) => void | Promise&lt;void>\">setup</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) build: PluginBuild\">build</data-lsp></span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) build: PluginBuild\">build</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(method) PluginBuild.onResolve(options: OnResolveOptions, callback: (args: OnResolveArgs) => OnResolveResult | Promise&lt;OnResolveResult | null | undefined> | null | undefined): void\">onResolve</data-lsp></span><span style=\"color: #D4D4D4\">({ </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) OnResolveOptions.namespace?: string | undefined\">namespace</data-lsp>:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"file\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) OnResolveOptions.filter: RegExp\">filter</data-lsp>:</span><span style=\"color: #D16969\"> /.</span><span style=\"color: #D7BA7D\">*</span><span style=\"color: #D16969\">/</span><span style=\"color: #D4D4D4\"> }, (</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) args: OnResolveArgs\">args</data-lsp></span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">=&gt;</span><span style=\"color: #D4D4D4\"> {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">                  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) args: OnResolveArgs\">args</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) OnResolveArgs.kind: ImportKind\">kind</data-lsp></span><span style=\"color: #D4D4D4\"> === </span><span style=\"color: #CE9178\">\"entry-point\"</span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">null</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">                  }</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">                  </span><span style=\"color: #6A9955\">// If the file is in our icons folder use standard resolution.</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">                  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) args: OnResolveArgs\">args</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) OnResolveArgs.path: string\">path</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(method) String.startsWith(searchString: string, position?: number | undefined): boolean\">startsWith</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"./icons/\"</span><span style=\"color: #D4D4D4\">)) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">null</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">                  } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #6A9955\">// Otherwise flag is external.</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">                      </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) OnResolveResult.path?: string | undefined\">path</data-lsp>:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) namespace path&#10;(alias) const path: PlatformPath&#10;import path\">path</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(method) path.PlatformPath.join(...paths: string[]): string\">join</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) args: OnResolveArgs\">args</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) OnResolveArgs.resolveDir: string\">resolveDir</data-lsp></span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) args: OnResolveArgs\">args</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) OnResolveArgs.path: string\">path</data-lsp></span><span style=\"color: #D4D4D4\">),</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">                      </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) OnResolveResult.external?: boolean | undefined\">external</data-lsp>:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">                    };</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">                  }</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">                });</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">              },</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">            },</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">          ],</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">        });</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// Make sure we build something.</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"const outputFiles: OutputFile[]\">outputFiles</data-lsp></span><span style=\"color: #D4D4D4\"> || </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"const outputFiles: OutputFile[]\">outputFiles</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) Array&lt;OutputFile>.length: number\">length</data-lsp></span><span style=\"color: #D4D4D4\"> !== </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">null</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">        }</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// Return the bundled file contents.</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"const outputFiles: OutputFile[]\">outputFiles</data-lsp></span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) OutputFile.text: string\">text</data-lsp></span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">as</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">      }</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">null</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    },</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  };</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">}</span></div></code></div></pre>\n<h2 id=\"conclusion\" tabindex=\"-1\">Conclusion <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/optimising-icon-loading-with-storybook-and-vite/#conclusion\" aria-hidden=\"true\">#</a></h2>\n<p>And that is it. Three approaches that work in tandem to make Storybook DX so much nicer with large icon sets! I hope this blog post inspired you or solved a problem you were having, either way, thanks for reading.</p>\n",
      "date_published": "2022-07-24T00:00:00Z"
    },{
      "id": "https://www.andrewleedham.me/blog/posts/globs-are-builtin/",
      "url": "https://www.andrewleedham.me/blog/posts/globs-are-builtin/",
      "title": "Globs are built-in!",
      "content_html": "<p>I have recently been converting some large repos to Ecmascript Modules (ESM). As part of that process, I have been using <a href=\"https://github.com/facebook/jscodeshift\">jscodeshift</a> to convert en masse. To specify which files to convert the <code>jscodeshift</code> CLI accepts any number of paths separated by spaces (positional arguments). A perfect case for Unix path expansion (globs), since <code>jscodeshift</code> does not support globs via a library like <a href=\"https://www.npmjs.com/package/glob\">glob</a> or <a href=\"https://www.npmjs.com/package/globby\">globby</a>. So, I pulled out my faded Unix knowledge.</p>\n<p>Globs just work in the shell! Path expansion takes a glob with wildcards and replaces it with matching paths. So say we have a directory structure like this:</p>\n<pre class=\"shiki dark-plus\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: undefined\">example\n├── file.css\n├── file.js\n├── other.js\n└── sub\n    └── file.js</span></div></code></div></pre>\n<p>Say we wanted to select all the JavaScript files in this structure, we could use the following glob <code>echo ./example/**/*.js</code> which would output:</p>\n<pre class=\"shiki dark-plus\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: undefined\">./example/file.js ./example/other.js ./example/sub/file.js</span></div></code></div></pre>\n<p>The important thing to note here is that the echo command is called as <code>echo ./example/file.js ./example/other.js ./example/sub/file.js</code> because the path expansion is executed first then passed to the command as arguments. Meaning we can use built-in globs for any CLI that does not natively support globs.</p>\n<p>Using built-in path expansion is useful even if a CLI supports native globs for two reasons:</p>\n<ol>\n<li>Globbing libraries often have slightly different syntax, meaning you need to figure out which is in use and adapt your muscle memory per CLI. But with Unix path expansion, you are always using the same system with the same syntax.</li>\n<li>You can dry-run your glob outside of the CLI using <code>echo</code> meaning, you are sure it is processing the correct files without running some potentially destructive process.</li>\n</ol>\n<p><strong>Bonus Tip</strong> use <code>echo ./example/**/*.js | tr ' ' '\\n'</code> to print each file path on a newline. Making it much easier to digest large sets of files.</p>\n",
      "date_published": "2022-02-08T00:00:00Z"
    },{
      "id": "https://www.andrewleedham.me/blog/posts/invariant-what-is-it/",
      "url": "https://www.andrewleedham.me/blog/posts/invariant-what-is-it/",
      "title": "Invariant what is it?",
      "content_html": "<p>Invariant comes from mathematics which defines it as a property that is guaranteed not to change. The common example being the rotation of a triangle: you can say that the triangle's side lengths are invariant.</p>\n<p>In computer science, invariant means the same but in a specific context. It is a condition of a program that during some period of execution is guaranteed not to change.</p>\n<p>So why is invariant useful and how does it relate to TypeScript. There are a few libraries that essentially do the same thing:</p>\n<ul>\n<li><a href=\"https://github.com/alexreardon/tiny-invariant\">https://github.com/alexreardon/tiny-invariant</a></li>\n<li><a href=\"https://github.com/zertosh/invariant\">https://github.com/zertosh/invariant</a></li>\n</ul>\n<p>They do nothing if a truthy value is passed or throw an error if a falsy value is passed. I think of it like an assert function, because invariant is not in my general vocabulary.</p>\n<p>TypeScript comes into play by providing type narrowing. For example:</p>\n<pre class=\"shiki dark-plus twoslash lsp\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">typescript</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #C586C0\">import</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) function invariant(condition: any, message?: string | (() => string)): asserts condition&#10;import invariant\">invariant</data-lsp></span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">from</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">&apos;tiny-invariant&apos;</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #569CD6\">function</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"function fn(argument: string | null): void\">fn</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) argument: string | null\">argument</data-lsp></span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> | </span><span style=\"color: #4EC9B0\">null</span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(alias) invariant(condition: any, message?: string | (() => string) | undefined): asserts condition&#10;import invariant\">invariant</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) argument: string | null\">argument</data-lsp></span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"var console: Console\">console</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(method) Console.log(...data: any[]): void\">log</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) argument: string\" style=\"border-bottom: solid 2px lightgrey;\">argument</data-lsp></span><span style=\"color: #D4D4D4\">);</span></div><div class=\"meta-line\"><span class=\"popover-prefix\">                   </span><span class=\"popover\"><div class=\"arrow\"></div>(parameter) argument: string</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">}</span></div></code></div></pre>\n<p>As you can see <code>argument</code> is of type <code>string</code> instead of <code>string | null</code>, because TypeScript knows invariant will throw if <code>argument</code> is falsy, it can rule out <code>null</code>.</p>\n<p>A great use case for this is checking for required parameters in a context where you cannot guarantee their values, like user input. <a href=\"https://remix.run/docs/en/v1/tutorials/blog#:~:text=npm%20add%20tiny%2Dinvariant\">Remix make use of tiny-invariant</a> Remix make use of tiny-invariant in their examples for this very purpose (which is where I first learned about the concept).</p>\n<p>To see how invariant actually works we can implement it ourselves:</p>\n<pre class=\"shiki dark-plus twoslash lsp\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">typescript</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #569CD6\">function</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"function invariant(value: any): asserts value\">invariant</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) value: any\">value</data-lsp></span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #4EC9B0\">any</span><span style=\"color: #D4D4D4\">): asserts </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) value: any\">value</data-lsp></span><span style=\"color: #D4D4D4\">  {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) value: any\">value</data-lsp></span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  }</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">throw</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"var Error: ErrorConstructor&#10;new (message?: string | undefined) => Error\">Error</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">`</span><span style=\"color: #569CD6\">${</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) value: any\">value</data-lsp></span><span style=\"color: #569CD6\">}</span><span style=\"color: #CE9178\"> is falsy`</span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">}</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #569CD6\">function</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"function fn(argument: string | null): void\">fn</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) argument: string | null\">argument</data-lsp></span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> | </span><span style=\"color: #4EC9B0\">null</span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"function invariant(value: any): asserts value\">invariant</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) argument: string | null\">argument</data-lsp></span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"var console: Console\">console</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(method) Console.log(...data: any[]): void\">log</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) argument: string\" style=\"border-bottom: solid 2px lightgrey;\">argument</data-lsp></span><span style=\"color: #D4D4D4\">);</span></div><div class=\"meta-line\"><span class=\"popover-prefix\">                   </span><span class=\"popover\"><div class=\"arrow\"></div>(parameter) argument: string</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">}</span></div></code></div></pre>\n<p>This uses a new keyword added to <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions\">TypeScript 3.7 <code>asserts</code></a> which determines that <code>argument</code> must be true if it returns. Otherwise, the function will throw an error which is what we want here!</p>\n",
      "date_published": "2022-01-20T00:00:00Z"
    },{
      "id": "https://www.andrewleedham.me/blog/posts/the-lesser-known-comment/",
      "url": "https://www.andrewleedham.me/blog/posts/the-lesser-known-comment/",
      "title": "The lesser-known ^? comment",
      "content_html": "<p>Have you ever seen the <code>// ^?</code> in some code and wondered what it does. I have started using it when sharing TypeScript Playroom snippets, so thought I would write up a quick explainer. It is a special piece of syntax introduced by the <a href=\"https://www.npmjs.com/package/@typescript/twoslash\">twoslash library</a>: a library maintained by the TypeScript team to introduce special markup to the TypeScript website.</p>\n<p>As part of my job I am often asked for help on TypeScript related issues (I am not a TypeScript expert, just the one that introduced it to our team), e.g how to improve or fix types for a specific function, and I am often sent snippets of code that are not working. TypeScript is not easy to reason about outside of an actual development environment, so I often lean on the excellent <a href=\"https://www.typescriptlang.org/play\">TypeScript Playroom</a>. Recently when sharing links to code in the Playroom, I have started including <code>// ^?</code> comments.</p>\n<p>So what does <code>// ^?</code> do. Simply put it shows the evaluated type of the statement the up arrow/caret (<code>^</code>) is pointing at inline with the comment. This doesn't particularly uncover any hidden information, as the same data can be viewed when hovering over said variable. This comment shows how other types may affect a single type without having to keep hovering. Furthermore, you can point out the exact type you are trying to fix in the Playground when sending links at a glance.</p>\n<p>Since twoslash is an open-source library it can be used outside of the TypeScript Playground. <a href=\"https://orta.io/\">Orta Therox</a> has created an excellent set of libraries under the name <a href=\"https://shikijs.github.io/twoslash/\">shiki twoslash</a>, <a href=\"https://github.com/shikijs/shiki\">shiki</a> being VSCode's syntax highlighter. Outside of the charming aesthetic shiki twoslash integrates with a bunch of tools used for turning markdown into HTML, creating code snippets that are not only highlighted and support the twoslash syntax but also shows TypeScript types on hover. I have recently set up the 11ty plugin for shiki twoslash on this very site, take a look at it in action below:</p>\n<pre class=\"shiki dark-plus twoslash lsp\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">typescript</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\"><data-lsp lsp=\"const inferred: {&#10;    data: string;&#10;}\" style=\"border-bottom: solid 2px lightgrey;\">inferred</data-lsp></span><span style=\"color: #D4D4D4\"> = { </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) data: string\">data</data-lsp>:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">&apos;value&apos;</span><span style=\"color: #D4D4D4\"> };</span></div><div class=\"meta-line\"><span class=\"popover-prefix\">         </span><span class=\"popover\"><div class=\"arrow\"></div>const inferred: {\n    data: string;\n}</span></div></code></div></pre>\n",
      "date_published": "2021-12-31T00:00:00Z"
    },{
      "id": "https://www.andrewleedham.me/blog/posts/the-two-ways-to-test-errors-jest/",
      "url": "https://www.andrewleedham.me/blog/posts/the-two-ways-to-test-errors-jest/",
      "title": "The two ways to test errors in Jest",
      "content_html": "<h2 id=\"method-one\" tabindex=\"-1\">Method one <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/the-two-ways-to-test-errors-jest/#method-one\" aria-hidden=\"true\">#</a></h2>\n<p>The simplest way to test for errors being thrown in Jest is using one of the three built-in matchers:</p>\n<ul>\n<li><a href=\"https://jestjs.io/docs/expect#tothrowerror\"><code>toThrow(error?)</code></a> where <code>error</code> is a matcher for the specific type or message of the thrown error. To match the message you have three options: Regular expression, exact string match or passing an error instance where the message will be directly compared. To match the type you can pass an Error class and it will check if the error was created from it (<code>instanceof</code>).</li>\n<li><a href=\"https://jestjs.io/docs/expect#tothrowerrormatchingsnapshothint\"><code>toThrowErrorMatchingSnapshot(hint?)</code></a> where hint is some string to uniquely identify the snapshot. I would not recommend using this, as error messages are usually minimal and moving them into a different snapshot file just disconnects the test from the expected outcome.</li>\n<li><a href=\"https://jestjs.io/docs/expect#tothrowerrormatchinginlinesnapshotinlinesnapshot\"><code>toThrowErrorMatchingInlineSnapshot(inlineSnapshot)</code></a> where <code>inlineSnapshot</code> is the error message itself, this is the same as <code>toThrow</code> with an exact string match with the added benefit of automatically being updated without having to copy/paste the message from the console.</li>\n</ul>\n<p>Something to note when using any of these functions is that you should be passing a function to <a href=\"https://jestjs.io/docs/expect#expectvalue\"><code>expect</code></a>, not a value like you usually would. This is because Jest needs to manage when your function is called so it can wrap it in a <code>try</code>/<code>catch</code> internally. In the case of asynchronous code you can just pass a <code>Promise</code> and do <code>.rejects.toThrow()</code>.</p>\n<p>For most cases the above functions should suffice. However, you may have noticed they only look at either the message of the error or its Error class. What if you want to go deeper, for example there is a new Error class that has landed in several browsers and is in newer versions of Node.js called <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a>. It groups multiple errors together by storing them as 'children' on a property called &quot;errors&quot;. We could test if we are getting an <code>AggregateError</code> or if the message of said error is as expected, but not what each of the internal errors are. This brings us to our second way of testing for errors in Jest.</p>\n<h1 id=\"method-2\" tabindex=\"-1\">Method 2 <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/the-two-ways-to-test-errors-jest/#method-2\" aria-hidden=\"true\">#</a></h1>\n<p>Using <code>try</code>/<code>catch</code> in a Jest test function is the second method, this may seem obvious but what if no error is thrown, the test would still pass. Jest has us covered here with a function for checking how many assertions were made in a test: <a href=\"https://jestjs.io/docs/expect#expecthasassertions\"><code>expect.hasAssertions()</code></a>, or even <a href=\"https://jestjs.io/docs/expect#expectassertionsnumber\"><code>expect.assertions(number)</code></a> if you want to make sure a specific number of assertions were made. I have been using Jest for years and have only just discovered these two functions (hence the blogpost). So, let’s look at an example:</p>\n<pre class=\"shiki dark-plus twoslash lsp\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">javascript</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #569CD6\">function</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"function foo(): void\">foo</data-lsp></span><span style=\"color: #D4D4D4\">() {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">throw</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"var AggregateError: AggregateErrorConstructor&#10;new (errors: Iterable&lt;any>, message?: string | undefined) => AggregateError\">AggregateError</data-lsp></span><span style=\"color: #D4D4D4\">([</span><span style=\"color: #569CD6\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"var Error: ErrorConstructor&#10;new (message?: string | undefined) => Error\">Error</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&apos;bar&apos;</span><span style=\"color: #D4D4D4\">), </span><span style=\"color: #569CD6\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"var Error: ErrorConstructor&#10;new (message?: string | undefined) => Error\">Error</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&apos;baz&apos;</span><span style=\"color: #D4D4D4\">)], </span><span style=\"color: #CE9178\">&apos;foo&apos;</span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">}</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #DCDCAA\"><data-lsp lsp=\"var test: jest.It&#10;(name: string, fn?: jest.ProvidesCallback | undefined, timeout?: number | undefined) => void\">test</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&apos;AggregateError has specific child errors&apos;</span><span style=\"color: #D4D4D4\">, () </span><span style=\"color: #569CD6\">=&gt;</span><span style=\"color: #D4D4D4\"> {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// We are telling Jest that this test definitely has assertions.</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// Meaning if expect is not called at least once it will fail.</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// So if foo does not throw an error our test will fail.</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"const expect: jest.Expect\">expect</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(method) jest.Expect.hasAssertions(): void\">hasAssertions</data-lsp></span><span style=\"color: #D4D4D4\">();</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">try</span><span style=\"color: #D4D4D4\"> {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"function foo(): void\">foo</data-lsp></span><span style=\"color: #D4D4D4\">();</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  } </span><span style=\"color: #C586C0\">catch</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(local var) error: unknown\">error</data-lsp></span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// We now have the full error object and can test whatever we like.</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"const expect: jest.Expect&#10;&lt;any>(actual: any) => jest.JestMatchers&lt;any>\">expect</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(local var) error: unknown\">error</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"any\">message</data-lsp></span><span style=\"color: #D4D4D4\">).</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(method) jest.Matchers&lt;void, any>.toBe&lt;string>(expected: string): void\">toBe</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&apos;foo&apos;</span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"const expect: jest.Expect&#10;&lt;any>(actual: any) => jest.JestMatchers&lt;any>\">expect</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(local var) error: unknown\">error</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"any\">errors</data-lsp></span><span style=\"color: #D4D4D4\">).</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(method) jest.Matchers&lt;void, any>.toHaveLength(expected: number): void\">toHaveLength</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"const expect: jest.Expect&#10;&lt;any>(actual: any) => jest.JestMatchers&lt;any>\">expect</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(local var) error: unknown\">error</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"any\">errors</data-lsp></span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">]?.</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"any\">message</data-lsp></span><span style=\"color: #D4D4D4\">).</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(method) jest.Matchers&lt;void, any>.toBe&lt;string>(expected: string): void\">toBe</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&apos;bar&apos;</span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"const expect: jest.Expect&#10;&lt;any>(actual: any) => jest.JestMatchers&lt;any>\">expect</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(local var) error: unknown\">error</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"any\">errors</data-lsp></span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]?.</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"any\">message</data-lsp></span><span style=\"color: #D4D4D4\">).</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(method) jest.Matchers&lt;void, any>.toBe&lt;string>(expected: string): void\">toBe</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&apos;baz&apos;</span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  }</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">});</span></div></code></div></pre>\n",
      "date_published": "2021-10-23T00:00:00Z"
    },{
      "id": "https://www.andrewleedham.me/blog/posts/thoughts-on-simplifying-long-if-statements/",
      "url": "https://www.andrewleedham.me/blog/posts/thoughts-on-simplifying-long-if-statements/",
      "title": "Thoughts on simplifying long if statements",
      "content_html": "<p>I ran into a problem recently where an if statement was getting out of hand. It was quickly becoming unreadable. So I did some thinking on how I could simplify it. The if statement in question was needed to check if 1 of 3 given objects was truthy but only 1. The astute may recognise this as an exclusive or (xor) statement. So let's look at the problem, written out it would have looked something like this:</p>\n<pre class=\"shiki dark-plus\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">javascript</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  (</span><span style=\"color: #9CDCFE\">term1</span><span style=\"color: #D4D4D4\"> && !</span><span style=\"color: #9CDCFE\">term2</span><span style=\"color: #D4D4D4\"> && !</span><span style=\"color: #9CDCFE\">term3</span><span style=\"color: #D4D4D4\">) ||</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  (!</span><span style=\"color: #9CDCFE\">term1</span><span style=\"color: #D4D4D4\"> && </span><span style=\"color: #9CDCFE\">term2</span><span style=\"color: #D4D4D4\"> && !</span><span style=\"color: #9CDCFE\">term3</span><span style=\"color: #D4D4D4\">) ||</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  (!</span><span style=\"color: #9CDCFE\">term1</span><span style=\"color: #D4D4D4\"> && !</span><span style=\"color: #9CDCFE\">term2</span><span style=\"color: #D4D4D4\"> && </span><span style=\"color: #9CDCFE\">term3</span><span style=\"color: #D4D4D4\">)</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// do something</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">}</span></div></code></div></pre>\n<p><a href=\"https://prettier.io/\">Prettier</a> admittedly does a great job of formatting this, but tracking each of the nots (<code>!</code>) are in the correct place is error-prone. So what can we do to improve this? There are several techniques that could be useful here, each with different pros and cons, and each can be useful on there own.</p>\n<h2 id=\"splitting-the-if-statment-into-3-variables\" tabindex=\"-1\">Splitting the if statment into 3 variables <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/thoughts-on-simplifying-long-if-statements/#splitting-the-if-statment-into-3-variables\" aria-hidden=\"true\">#</a></h2>\n<pre class=\"shiki dark-plus\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">javascript</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\">onlyTerm1</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">term1</span><span style=\"color: #D4D4D4\"> && !</span><span style=\"color: #9CDCFE\">term2</span><span style=\"color: #D4D4D4\"> && !</span><span style=\"color: #9CDCFE\">term3</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\">onlyTerm2</span><span style=\"color: #D4D4D4\"> = !</span><span style=\"color: #9CDCFE\">term1</span><span style=\"color: #D4D4D4\"> && </span><span style=\"color: #9CDCFE\">term2</span><span style=\"color: #D4D4D4\"> && !</span><span style=\"color: #9CDCFE\">term3</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\">onlyTerm3</span><span style=\"color: #D4D4D4\"> = !</span><span style=\"color: #9CDCFE\">term1</span><span style=\"color: #D4D4D4\"> && !</span><span style=\"color: #9CDCFE\">term2</span><span style=\"color: #D4D4D4\"> && </span><span style=\"color: #9CDCFE\">term3</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">onlyTerm1</span><span style=\"color: #D4D4D4\"> || </span><span style=\"color: #9CDCFE\">onlyTerm2</span><span style=\"color: #D4D4D4\"> || </span><span style=\"color: #9CDCFE\">onlyTerm3</span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// do something</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">}</span></div></code></div></pre>\n<h3 id=\"pros\" tabindex=\"-1\">Pros <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/thoughts-on-simplifying-long-if-statements/#pros\" aria-hidden=\"true\">#</a></h3>\n<ul>\n<li>More descriptive, making the intent clear. Previously without parsing all the terms in your head it was unclear the purpose of the if statement. You could use comments, but I personally feel the more the code can talk for itself the better.</li>\n</ul>\n<h3 id=\"cons\" tabindex=\"-1\">Cons <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/thoughts-on-simplifying-long-if-statements/#cons\" aria-hidden=\"true\">#</a></h3>\n<ul>\n<li>We still have the not (<code>!</code>) problem. Making sure each is in the correct place is confusing to look at.</li>\n</ul>\n<h2 id=\"abstracting-the-logic-into-a-function\" tabindex=\"-1\">Abstracting the logic into a function <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/thoughts-on-simplifying-long-if-statements/#abstracting-the-logic-into-a-function\" aria-hidden=\"true\">#</a></h2>\n<pre class=\"shiki dark-plus\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">javascript</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #569CD6\">function</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">onlyTerm</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">term</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">otherTerm1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">otherTerm2</span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">term</span><span style=\"color: #D4D4D4\"> && !</span><span style=\"color: #9CDCFE\">otherTerm1</span><span style=\"color: #D4D4D4\"> && !</span><span style=\"color: #9CDCFE\">otherTerm2</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">}</span></div><div class=\"line\"></div><div class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\">onlyTerm1</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">onlyTerm</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">term1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">term2</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">term3</span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\">onlyTerm1</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">onlyTerm</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">term2</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">term3</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">term1</span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\">onlyTerm1</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">onlyTerm</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">term3</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">term1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">term2</span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">onlyTerm1</span><span style=\"color: #D4D4D4\"> || </span><span style=\"color: #9CDCFE\">onlyTerm2</span><span style=\"color: #D4D4D4\"> || </span><span style=\"color: #9CDCFE\">onlyTerm3</span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// do something</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">}</span></div></code></div></pre>\n<h3 id=\"pros-1\" tabindex=\"-1\">Pros <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/thoughts-on-simplifying-long-if-statements/#pros-1\" aria-hidden=\"true\">#</a></h3>\n<ul>\n<li>More descriptive, making the intent clear.</li>\n<li>The not (<code>!</code>) logic is written once, which is easier to follow, as we don't have a grid of them.</li>\n</ul>\n<h3 id=\"cons-1\" tabindex=\"-1\">Cons <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/thoughts-on-simplifying-long-if-statements/#cons-1\" aria-hidden=\"true\">#</a></h3>\n<ul>\n<li>We now have to track the order each term is passed to the <code>onlyTerm</code> function, which is just as bad as the not (<code>!</code>) grid.</li>\n</ul>\n<h2 id=\"using-javascripts-functional-program-style-array-functions\" tabindex=\"-1\">Using JavaScripts functional program style Array functions <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/thoughts-on-simplifying-long-if-statements/#using-javascripts-functional-program-style-array-functions\" aria-hidden=\"true\">#</a></h2>\n<pre class=\"shiki dark-plus\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">javascript</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> ([</span><span style=\"color: #9CDCFE\">term1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">term2</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">term3</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #DCDCAA\">filter</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #9CDCFE\">term</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">=&gt;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Boolean</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">term</span><span style=\"color: #D4D4D4\">)).</span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\"> === </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// do something</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">}</span></div></code></div></pre>\n<h3 id=\"pros-2\" tabindex=\"-1\">Pros <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/thoughts-on-simplifying-long-if-statements/#pros-2\" aria-hidden=\"true\">#</a></h3>\n<ul>\n<li>We can add any number of terms without the length of the if statement growing exponentially.</li>\n<li>We don't have to track any nots (<code>!</code>) or the order of the terms.</li>\n</ul>\n<h3 id=\"cons-2\" tabindex=\"-1\">Cons <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/thoughts-on-simplifying-long-if-statements/#cons-2\" aria-hidden=\"true\">#</a></h3>\n<ul>\n<li>The intent is not explicitly clear. It is easier to parse in your head: but still not ideal.</li>\n</ul>\n<h2 id=\"creating-an-exclusive-or-(xor)-helper-function\" tabindex=\"-1\">Creating an exclusive or (xor) helper function <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/thoughts-on-simplifying-long-if-statements/#creating-an-exclusive-or-(xor)-helper-function\" aria-hidden=\"true\">#</a></h2>\n<pre class=\"shiki dark-plus\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">javascript</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #569CD6\">function</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">xor</span><span style=\"color: #D4D4D4\">(...</span><span style=\"color: #9CDCFE\">terms</span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">terms</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">filter</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #9CDCFE\">term</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">=&gt;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Boolean</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">term</span><span style=\"color: #D4D4D4\">)).</span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\"> === </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">}</span></div><div class=\"line\"><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">xor</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">term1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">term2</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">term3</span><span style=\"color: #D4D4D4\">)) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// do something</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">}</span></div></code></div></pre>\n<h3 id=\"pros-3\" tabindex=\"-1\">Pros <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/thoughts-on-simplifying-long-if-statements/#pros-3\" aria-hidden=\"true\">#</a></h3>\n<ul>\n<li>More descriptive, making the intent clear. Assuming you know what <code>xor</code> refers to, some JSDoc would go a long way there.</li>\n<li>We can add any number of terms without the length of the if statement growing exponentially.</li>\n<li>We don't have to track any nots (<code>!</code>) or the order of the terms.</li>\n</ul>\n<p>Note that yes, with large data sets the xor function is not the most efficient implementation. There is room for optimisation. But on three terms, or likely any number of terms you are likely to put in an if statement, the difference would be negligible. Readability reigns king over micro optimisations in most cases.</p>\n<h2 id=\"conclusion\" tabindex=\"-1\">Conclusion <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/thoughts-on-simplifying-long-if-statements/#conclusion\" aria-hidden=\"true\">#</a></h2>\n<p>Abstracting to functions and variables are two very crucial tools in our programming toolbelts. Each of these techniques can be used in different scenarios. None of them are perfect. But taking the time to think about readability is key not only in shared code-bases, but for yourself when coming back to your code years, months or even weeks later.</p>\n",
      "date_published": "2021-10-12T00:00:00Z"
    },{
      "id": "https://www.andrewleedham.me/blog/posts/how-to-quickly-find-mdn-articles/",
      "url": "https://www.andrewleedham.me/blog/posts/how-to-quickly-find-mdn-articles/",
      "title": "How to Quickly Find MDN Articles",
      "content_html": "<p>If you are anything like me, you spend a lot of time on <a href=\"https://developer.mozilla.org/en-US/\">MDN</a> looking up how to use HTML, CSS, and JavaScript features. To speed up finding pages, I have been using <a href=\"https://github.com/lazd/mdn.io\">mdn.io</a> for a while. It is a great project which allows you to append the property name or topic in the URL and go straight to the correct page. For example, <a href=\"https://mdn.io/display\">https://mdn.io/display</a> should take you to the CSS display property page. It works by doing an &quot;I'm Feeling Lucky&quot; duckduckgo search, which I have found is very consistent and reliable.</p>\n",
      "date_published": "2021-10-08T00:00:00Z"
    },{
      "id": "https://www.andrewleedham.me/blog/posts/how-experimental-browser-features-helped-me-verify-a-hypothesis/",
      "url": "https://www.andrewleedham.me/blog/posts/how-experimental-browser-features-helped-me-verify-a-hypothesis/",
      "title": "How Experimental Browser Features Helped Me Verify a Hypothesis",
      "content_html": "<p>An issue was recently reported to me that an accordion component I work on had a scrollbar in some circumstances when it should not. For a bit of context, the accordion shows scrollbars when the content height is more than 50% of the viewport, and this content was not.</p>\n<p>Thankfully, the error report had a link to a few affected pages, and I could recreate the issue, so it was a good starting place. I wrote a lot of the code for this component and reviewed the rest of it, so again a fortunate position which is rare.</p>\n<p>When opening and closing the accordion it animates the <code>max-height</code> and toggles between an <code>overflow-y</code> of <code>none</code> and <code>auto</code> as to hide the scrollbar during the animation. This is a common technique as <code>max-height</code> is animatable and does not cause a reflow like height would. In order to add the <code>overflow-y</code> we hook into the <code>transitionend</code> event in JavaScript, so my initial thought was that this was not firing and thus leaving the <code>max-height</code> or not changing the <code>overflow-y</code>, but that was not the case. Then I noticed something, after toggling the accordion what seemed 1000 times, the text content was flowing onto an additional line at the end of the animation when the <code>overflow-y</code> was being added! To me, this instantly rang alarms in my head! The height I am calculating for the <code>max-height</code> is not taking the scrollbar into account, as it removes ~15px from the width of the content potentially making it flow onto another line. I quickly scrambled to prove this hypothesis and remembered reading about a new property that was intended to stop layout shift from scrollbars. After googling and trawling through creators past tweets, I found it <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-gutter\"><code>scrollbar-gutter</code></a>, it is an experimental feature in Chrome but it was easy to enable and using it with my accordion resolved the issue. So all I needed was a fix that was not an experimental feature. In the end, I had to rely on setting <code>overflow-y</code> to <code>auto</code> triggering layout, calculating the height, and then setting it back to <code>none</code>. Triggering an additional layout step is not really what I wanted to do, but after mulling on it for a while, I could not think of a better solution with the tools I had.</p>\n<p>This perhaps gives you insight into how I go about solving problems. It was satisfying to realise the cause and verify it quickly with a new browser feature!</p>\n",
      "date_published": "2021-10-07T00:00:00Z"
    },{
      "id": "https://www.andrewleedham.me/blog/posts/you-might-want-pick-not-partial-in-typescript/",
      "url": "https://www.andrewleedham.me/blog/posts/you-might-want-pick-not-partial-in-typescript/",
      "title": "You might want Pick not Partial in TypeScript",
      "content_html": "<p><code>Partial</code> is a TypeScript utility-type that transforms all the property value types of an object to be optional. This can be useful when writing tests that only look at certain parts of an object. However, for TypeScript to be happy with passing said semi-populated object to a function, you must use the <code>as</code> keyword to force TypeScript to see it as the full object. This is not ideal as you lose a degree of type safety in that your function thinks it has a full object but in fact does not. So, if you update your function to use other properties of the object, you may start getting runtime errors that could have been caught by TypeScript.</p>\n<p>One solution I have been experimenting with is moving the process of scoping object parameters. So rather than using <code>Partial</code> on the caller side, we can use <code>Pick</code> — a TypeScript utility-type that reduces an object type to given properties — on the implementation side. Meaning we are telling TypeScript exactly what properties of a perhaps more complex object we intend to use.</p>\n<p>If you have ever written Express middleware or similar, you may have come across this issue recreating req and res. So, if we are trying to test this middleware we only need to create a req and/or res object with the properties we need. Let's look at an example:</p>\n<pre class=\"shiki dark-plus twoslash lsp\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">typescript</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #6A9955\">// @filename: authenticate.ts</span></div><div class=\"line\"><span style=\"color: #C586C0\">import</span><span style=\"color: #D4D4D4\"> { </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) interface NextFunction&#10;import NextFunction\">NextFunction</data-lsp></span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) interface Request&lt;P = core.ParamsDictionary, ResBody = any, ReqBody = any, ReqQuery = qs.ParsedQs, Locals extends Record&lt;string, any> = Record&lt;string, any>>&#10;import Request\">Request</data-lsp></span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) interface Response&lt;ResBody = any, Locals extends Record&lt;string, any> = Record&lt;string, any>>&#10;import Response\">Response</data-lsp></span><span style=\"color: #D4D4D4\"> } </span><span style=\"color: #C586C0\">from</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"express\"</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\"><data-lsp lsp=\"const staticKey: &quot;f9asdjb28asfdlmx&quot;\">staticKey</data-lsp></span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">\"f9asdjb28asfdlmx\"</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #C586C0\">export</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">type</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"type AuthRequest = {&#10;    params: ParamsDictionary;&#10;    headers: IncomingHttpHeaders;&#10;}\">AuthRequest</data-lsp></span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"type Pick&lt;T, K extends keyof T> = { [P in K]: T[P]; }\">Pick</data-lsp></span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"(alias) interface Request&lt;P = core.ParamsDictionary, ResBody = any, ReqBody = any, ReqQuery = qs.ParsedQs, Locals extends Record&lt;string, any> = Record&lt;string, any>>&#10;import Request\">Request</data-lsp></span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"params\"</span><span style=\"color: #D4D4D4\"> | </span><span style=\"color: #CE9178\">\"headers\"</span><span style=\"color: #D4D4D4\">&gt;;</span></div><div class=\"line\"><span style=\"color: #C586C0\">export</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">type</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"type AuthResponse = {&#10;    send: Send&lt;any, Response&lt;any, Record&lt;string, any>>>;&#10;    sendStatus: (code: number) => Response&lt;any, Record&lt;string, any>>;&#10;}\">AuthResponse</data-lsp></span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"type Pick&lt;T, K extends keyof T> = { [P in K]: T[P]; }\">Pick</data-lsp></span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"(alias) interface Response&lt;ResBody = any, Locals extends Record&lt;string, any> = Record&lt;string, any>>&#10;import Response\">Response</data-lsp></span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"send\"</span><span style=\"color: #D4D4D4\"> | </span><span style=\"color: #CE9178\">\"sendStatus\"</span><span style=\"color: #D4D4D4\">&gt;;</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #C586C0\">export</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">async</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">function</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"function authenticate(req: AuthRequest, res: AuthResponse, next: NextFunction): Promise&lt;void>\">authenticate</data-lsp></span><span style=\"color: #D4D4D4\">(</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) req: AuthRequest\">req</data-lsp></span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"type AuthRequest = {&#10;    params: ParamsDictionary;&#10;    headers: IncomingHttpHeaders;&#10;}\">AuthRequest</data-lsp></span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) res: AuthResponse\">res</data-lsp></span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"type AuthResponse = {&#10;    send: Send&lt;any, Response&lt;any, Record&lt;string, any>>>;&#10;    sendStatus: (code: number) => Response&lt;any, Record&lt;string, any>>;&#10;}\">AuthResponse</data-lsp></span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) next: NextFunction\">next</data-lsp></span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"(alias) interface NextFunction&#10;import NextFunction\">NextFunction</data-lsp></span></div><div class=\"line\"><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) req: AuthRequest\">req</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) headers: IncomingHttpHeaders\">headers</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) IncomingHttpHeaders.authorization?: string | undefined\">authorization</data-lsp></span><span style=\"color: #D4D4D4\">?.</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(method) String.replace(searchValue: string | RegExp, replaceValue: string): string (+3 overloads)\">replace</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Bearer: \"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"\"</span><span style=\"color: #D4D4D4\">) === </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"const staticKey: &quot;f9asdjb28asfdlmx&quot;\">staticKey</data-lsp></span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> { </span><span style=\"color: #4FC1FF\"><data-lsp lsp=\"const name: string\">name</data-lsp></span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">\"user\"</span><span style=\"color: #D4D4D4\"> } = </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) req: AuthRequest\">req</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) params: ParamsDictionary\">params</data-lsp></span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) res: AuthResponse\">res</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(property) send: (body?: any) => Response&lt;any, Record&lt;string, any>>\">send</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">`Hello </span><span style=\"color: #569CD6\">${</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"const name: string\">name</data-lsp></span><span style=\"color: #569CD6\">}</span><span style=\"color: #CE9178\">`</span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(parameter) res: AuthResponse\">res</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(method) sendStatus(code: number): Response&lt;any, Record&lt;string, any>>\">sendStatus</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">403</span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  }</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">}</span></div></code></div></pre>\n<p>The beauty of using <code>Pick</code> above is that we can still pass it a complete req/res object for example when passing it to <code>app.get</code> or <code>app.use</code> and TypeScript won't complain. Now we can look at the advantage of this approach: we can construct objects with just the properties we need for each test:</p>\n<pre class=\"shiki dark-plus twoslash lsp\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">typescript</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #6A9955\">// @filename: authenticate.test.ts</span></div><div class=\"line\"><span style=\"color: #C586C0\">import</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) function authenticate(req: AuthRequest, res: AuthResponse, next: NextFunction): Promise&lt;void>&#10;import authenticate\">authenticate</data-lsp></span><span style=\"color: #D4D4D4\">, { </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(alias) type AuthResponse = {&#10;    send: Send&lt;any, Response&lt;any, Record&lt;string, any>>>;&#10;    sendStatus: (code: number) => Response&lt;any, Record&lt;string, any>>;&#10;}&#10;import AuthResponse\">AuthResponse</data-lsp></span><span style=\"color: #D4D4D4\"> } </span><span style=\"color: #C586C0\">from</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"./authenticate\"</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #DCDCAA\"><data-lsp lsp=\"var test: jest.It&#10;(name: string, fn?: jest.ProvidesCallback | undefined, timeout?: number | undefined) => void\">test</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"unauthorized user\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">async</span><span style=\"color: #D4D4D4\"> () </span><span style=\"color: #569CD6\">=&gt;</span><span style=\"color: #D4D4D4\"> {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\"><data-lsp lsp=\"const res: AuthResponse\">res</data-lsp></span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #4EC9B0\"><data-lsp lsp=\"(alias) type AuthResponse = {&#10;    send: Send&lt;any, Response&lt;any, Record&lt;string, any>>>;&#10;    sendStatus: (code: number) => Response&lt;any, Record&lt;string, any>>;&#10;}&#10;import AuthResponse\">AuthResponse</data-lsp></span><span style=\"color: #D4D4D4\"> = {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) send: Send&lt;any, e.Response&lt;any, Record&lt;string, any>>>\">send</data-lsp>:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"namespace jest\">jest</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"function jest.fn(): jest.Mock&lt;any, any> (+1 overload)\">fn</data-lsp></span><span style=\"color: #D4D4D4\">(),</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(method) sendStatus(code: number): e.Response&lt;any, Record&lt;string, any>>\">sendStatus</data-lsp>:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"namespace jest\">jest</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"function jest.fn(): jest.Mock&lt;any, any> (+1 overload)\">fn</data-lsp></span><span style=\"color: #D4D4D4\">(),</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  };</span></div><div class=\"line\">&nbsp;</div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">await</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(alias) authenticate(req: AuthRequest, res: AuthResponse, next: e.NextFunction): Promise&lt;void>&#10;import authenticate\">authenticate</data-lsp></span><span style=\"color: #D4D4D4\">(</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) params: ParamsDictionary\">params</data-lsp>:</span><span style=\"color: #D4D4D4\"> {},</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(property) headers: IncomingHttpHeaders\">headers</data-lsp>:</span><span style=\"color: #D4D4D4\"> {},</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    },</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"const res: AuthResponse\">res</data-lsp></span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"namespace jest\">jest</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"function jest.fn(): jest.Mock&lt;any, any> (+1 overload)\">fn</data-lsp></span><span style=\"color: #D4D4D4\">()</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  );</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"const expect: jest.Expect&#10;&lt;(code: number) => e.Response&lt;any, Record&lt;string, any>>>(actual: (code: number) => e.Response&lt;any, Record&lt;string, any>>) => jest.JestMatchers&lt;(code: number) => e.Response&lt;any, Record&lt;string, any>>>\">expect</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"const res: AuthResponse\">res</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(method) sendStatus(code: number): e.Response&lt;any, Record&lt;string, any>>\">sendStatus</data-lsp></span><span style=\"color: #D4D4D4\">).</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(method) jest.Matchers&lt;void, (code: number) => e.Response&lt;any, Record&lt;string, any>>>.toHaveBeenCalledTimes(expected: number): void\">toHaveBeenCalledTimes</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"const expect: jest.Expect&#10;&lt;(code: number) => e.Response&lt;any, Record&lt;string, any>>>(actual: (code: number) => e.Response&lt;any, Record&lt;string, any>>) => jest.JestMatchers&lt;(code: number) => e.Response&lt;any, Record&lt;string, any>>>\">expect</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"const res: AuthResponse\">res</data-lsp></span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\"><data-lsp lsp=\"(method) sendStatus(code: number): e.Response&lt;any, Record&lt;string, any>>\">sendStatus</data-lsp></span><span style=\"color: #D4D4D4\">).</span><span style=\"color: #DCDCAA\"><data-lsp lsp=\"(method) jest.Matchers&lt;void, (code: number) => e.Response&lt;any, Record&lt;string, any>>>.toHaveBeenCalledWith&lt;[number]>(params_0: number): void\">toHaveBeenCalledWith</data-lsp></span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">403</span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">});</span></div></code></div></pre>\n<p>You could apply this to more than just testing. Anywhere you are accepting an object but only using a subset of properties could perhaps benefit from this approach. As with most things, it all depends on context, but it is worth keeping in mind that <code>Pick</code> might be a better option than <code>Partial</code>.</p>\n",
      "date_published": "2021-09-15T00:00:00Z"
    },{
      "id": "https://www.andrewleedham.me/blog/posts/jests-test-each-just-got-a-whole-lot-better/",
      "url": "https://www.andrewleedham.me/blog/posts/jests-test-each-just-got-a-whole-lot-better/",
      "title": "Jest&#39;s test.each just got a whole lot better",
      "content_html": "<p><a href=\"https://jestjs.io/\">Jest</a> the javascript testing framework recently (4 months ago) upgraded the <code>test.each</code> global function in <a href=\"https://github.com/facebook/jest/releases#:~:text=Add%20support%20for%20interpolation%20with%20object%20properties\">version 27</a> and seems to have gone under the radar. Well, I only just found it in <a href=\"https://jestjs.io/docs/api#1-testeachtablename-fn-timeout\">the documentation</a>...</p>\n<p>The feature in question is the ability to insert named properties of an object into a tests title. Previously we could only insert a single value or items from an array using <code>%s</code> to indicate a string and <code>%d</code> for a number etc. Aside from not supporting object properties at all, you could not control the order items would be replaced when using multiple insertions, for example <code>test.each([['foo', 'bar']])('%s %s', () =&gt; {})</code> would have a test name of &quot;foo bar&quot; and there was no way to do &quot;bar foo&quot;.</p>\n<p>You can now insert named properties with <code>$variable</code>, this is a win for test readability, because you can see how a test name will look without having to guess which item in an array is which. Sadly, the array order issue I mentioned above is still not possible, the closest I could get was <code>test.each([{0: 'foo', 1: 'bar'}])('$1 $0', () =&gt; {})</code>. However, I would recommend naming your test properties anyway.</p>\n<p>Let's look at an example of how you might use this new feature. Say we are writing a new case transform library and we are looking to write some unit tests for the following pure function:</p>\n<pre class=\"shiki dark-plus\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">javascript</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #569CD6\">function</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">changeCase</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">input</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">format</span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">switch</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">format</span><span style=\"color: #D4D4D4\">) {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'upper'</span><span style=\"color: #D4D4D4\">: {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">input</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">toUpperCase</span><span style=\"color: #D4D4D4\">();</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    }</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'lower'</span><span style=\"color: #D4D4D4\">: {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">input</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">toLowerCase</span><span style=\"color: #D4D4D4\">();</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    }</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\">: {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">input</span><span style=\"color: #D4D4D4\">;</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    }</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  }</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">}</span></div></code></div></pre>\n<p>We want to test our uppercase and lowercase formats with all uppercase, all lowercase, and mixed case strings. As well as a non-existing format. So rather than writing a separate test for each case with its own assertions, we could (as the name implies) just use <code>test.each</code> and construct an array of test cases instead, reusing the same test function for all of them. This is what that might look like in practise:</p>\n<pre class=\"shiki dark-plus\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">javascript</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\">sample</span><span style=\"color: #D4D4D4\"> = [</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  {</span><span style=\"color: #9CDCFE\">input:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'ALL CAPS'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">format:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'upper'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">expected:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'ALL CAPS'</span><span style=\"color: #D4D4D4\">},</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  {</span><span style=\"color: #9CDCFE\">input:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'ALL CAPS'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">format:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'lower'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">expected:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'all caps'</span><span style=\"color: #D4D4D4\">},</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  {</span><span style=\"color: #9CDCFE\">input:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'ALL CAPS'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">format:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'invalid'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">expected:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'ALL CAPS'</span><span style=\"color: #D4D4D4\">},</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  {</span><span style=\"color: #9CDCFE\">input:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'no caps'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">format:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'upper'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">expected:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'NO CAPS'</span><span style=\"color: #D4D4D4\">},</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  {</span><span style=\"color: #9CDCFE\">input:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'no caps'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">format:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'lower'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">expected:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'no caps'</span><span style=\"color: #D4D4D4\">},</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  {</span><span style=\"color: #9CDCFE\">input:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'no caps'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">format:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'invalid'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">expected:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'no caps'</span><span style=\"color: #D4D4D4\">},</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  {</span><span style=\"color: #9CDCFE\">input:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'MIxEd capS'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">format:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'upper'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">expected:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'MIXED CAPS'</span><span style=\"color: #D4D4D4\">},</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  {</span><span style=\"color: #9CDCFE\">input:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'MIxEd capS'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">format:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'lower'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">expected:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'mixed caps'</span><span style=\"color: #D4D4D4\">},</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  {</span><span style=\"color: #9CDCFE\">input:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'MIxEd capS'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">format:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'invalid'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">expected:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'MIxEd capS'</span><span style=\"color: #D4D4D4\">},</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">];</span></div><div class=\"line\"></div><div class=\"line\"><span style=\"color: #9CDCFE\">test</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">each</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">sample</span><span style=\"color: #D4D4D4\">)(</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #CE9178\">'Given \"$input\" $format formats as \"$expected\"'</span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  ({</span><span style=\"color: #9CDCFE\">input</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">format</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">expected</span><span style=\"color: #D4D4D4\">}) </span><span style=\"color: #569CD6\">=&gt;</span><span style=\"color: #D4D4D4\"> {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">expect</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #DCDCAA\">changeCase</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">input</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">format</span><span style=\"color: #D4D4D4\">)).</span><span style=\"color: #DCDCAA\">toBe</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">expected</span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  },</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">);</span></div></code></div></pre>\n<p>Previously we would likely write this test like so:</p>\n<pre class=\"shiki dark-plus\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">javascript</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\">sample</span><span style=\"color: #D4D4D4\"> = [</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  [</span><span style=\"color: #CE9178\">'ALL CAPS'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'upper'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'ALL CAPS'</span><span style=\"color: #D4D4D4\">],</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  [</span><span style=\"color: #CE9178\">'ALL CAPS'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'lower'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'all caps'</span><span style=\"color: #D4D4D4\">],</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  [</span><span style=\"color: #CE9178\">'ALL CAPS'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'invalid'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'ALL CAPS'</span><span style=\"color: #D4D4D4\">],</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  [</span><span style=\"color: #CE9178\">'no caps'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'upper'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'NO CAPS'</span><span style=\"color: #D4D4D4\">],</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  [</span><span style=\"color: #CE9178\">'no caps'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'lower'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'no caps'</span><span style=\"color: #D4D4D4\">],</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  [</span><span style=\"color: #CE9178\">'no caps'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'invalid'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'no caps'</span><span style=\"color: #D4D4D4\">],</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  [</span><span style=\"color: #CE9178\">'MIxEd capS'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'upper'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'MIXED CAPS'</span><span style=\"color: #D4D4D4\">],</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  [</span><span style=\"color: #CE9178\">'MIxEd capS'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'lower'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'mixed caps'</span><span style=\"color: #D4D4D4\">],</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  [</span><span style=\"color: #CE9178\">'MIxEd capS'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'invalid'</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">'MIxEd capS'</span><span style=\"color: #D4D4D4\">],</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">];</span></div><div class=\"line\"></div><div class=\"line\"><span style=\"color: #9CDCFE\">test</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">each</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">sample</span><span style=\"color: #D4D4D4\">)(</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #CE9178\">'Given \"%s\" %s formats as \"%s\"'</span><span style=\"color: #D4D4D4\">,</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  (</span><span style=\"color: #9CDCFE\">input</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">format</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">expected</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">=&gt;</span><span style=\"color: #D4D4D4\"> {</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">expect</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #DCDCAA\">changeCase</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">input</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">format</span><span style=\"color: #D4D4D4\">)).</span><span style=\"color: #DCDCAA\">toBe</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">expected</span><span style=\"color: #D4D4D4\">);</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">  },</span></div><div class=\"line\"><span style=\"color: #D4D4D4\">)</span></div></code></div></pre>\n<p>Looking at the 'sample' array above alone, it is not easy to infer what each item is representing, so you must track down to the test implementation to see what the parameters were named, and perhaps even how they are used in the test body. In this example that is not particularly a problem, but as you add test cases and you can no longer fit both in your viewport, you must scroll to know what the array you are adding to does.</p>\n<p>This is a powerful addition, albeit subtle, to the Jest library and opens new possibilities for naming tests and creating readable maintainable test suites. 2 potential improvements that could be made to the naming in <code>test.each</code>, would be <code>$n</code> where n is an integer to select array items by index, and also allowing a function instead of a string so the name can be truly customised.</p>\n",
      "date_published": "2021-09-10T00:00:00Z"
    },{
      "id": "https://www.andrewleedham.me/blog/posts/extracting-twitter-bookmarks/",
      "url": "https://www.andrewleedham.me/blog/posts/extracting-twitter-bookmarks/",
      "title": "Extracting Twitter Bookmarks",
      "content_html": "<p>Over the years I have used Twitter's bookmarks feature (formerly Flamingo's 'Read later' feature) to save useful tweets I may want to refer to later. This was great initially, but I now have 146 bookmarks and Twitter has no way of searching them! Therefore, I have decided to move them elsewhere, this brings to light another pitfall of Twitter bookmarks, there is no public API!</p>\n<p>My first attempt was following <a href=\"https://apievangelist.com/2019/12/30/pulling-your-twitter-bookmarks-via-the-twitter-api/\">an article</a> which used Postman's interceptor browser extension to get auth for the internal API. However, it seems Twitter have closed this loophole, and it just returns a 403 instantly (it also changed to GraphQL since that article was written). So, I decided to take matters into my own hands and dig around in dev-tools. My first line of attack was seeing if I could just scrape the <abbr title=\"Document Object Model\">DOM</abbr>, as I figured if I scroll all the way to the bottom of the page all the bookmarks will be in the DOM somewhere. I quickly found that they are using something akin to <a href=\"https://github.com/bvaughn/react-window\">react-window</a>, which only keeps a few DOM nodes of the greater list in the DOM at any 1 time, positioning them absolutely. This led me to my second line of attack, since they were likely using react-window, they must also be using React, so I fired up the <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React Developer Tools Extension</a>. After digging around in the obfuscated tree structure for a while, I finally found what I was looking for, a parent node with an array of all the bookmark data!</p>\n<h2 id=\"extracting-the-data\" tabindex=\"-1\">Extracting the data <a class=\"direct-link\" href=\"https://www.andrewleedham.me/blog/posts/extracting-twitter-bookmarks/#extracting-the-data\" aria-hidden=\"true\">#</a></h2>\n<p>If you are looking to extract your Twitter bookmarks the same way I have. Here is a little step by step:</p>\n<ol>\n<li>\n<p>Navigate to <a href=\"https://twitter.com/i/bookmarks\">https://twitter.com/i/bookmarks</a> and scroll all the way down to the bottom, so all your bookmarks are loaded.</p>\n</li>\n<li>\n<p>Open dev-tools in whatever browser you are using (assuming it supports the React Developer Tools Extension), and navigate to the &quot;Components&quot; tab.</p>\n</li>\n<li>\n<p>You will need to find an &quot;Anonymous&quot; component with the key &quot;bookmarks&quot; (unfortunately you cannot search by key currently), it should look something like this:<br />\n<img src=\"https://www.andrewleedham.me/img/extracting-twitter-bookmarks-tree.png\" alt=\"Shows the relevant tree structure in React Developer Tools\" /></p>\n</li>\n<li>\n<p>Selecting the &quot;Anonymous&quot; component with the key &quot;bookmarks&quot; should yield its props on the right panel, we are looking for the prop named &quot;list&quot;. Right click it and select &quot;Copy value to clipboard&quot;.<br />\n<img src=\"https://www.andrewleedham.me/img/extracting-twitter-bookmarks-props.png\" alt=\"Shows the bookmarks component props in React Developer Tools\" /></p>\n</li>\n<li>\n<p>The next step is data manipulation, we have a list of IDs but we need them as URLs to be useful. So, if you type <code>const bookmarks = </code> and then paste the copied value into the dev-tools console, and hit <kbd>Enter</kbd> you will have an array to work with. Running the following will convert it into an array of URLs.</p>\n</li>\n</ol>\n<pre class=\"shiki dark-plus\" style=\"background-color: #1E1E1E; color: #D4D4D4\"><div class=\"language-id\">javascript</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">bookmarks</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">slice</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">).</span><span style=\"color: #DCDCAA\">map</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #9CDCFE\">bookmark</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">=&gt;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">`https://twitter.com/i/web/status/</span><span style=\"color: #569CD6\">${</span><span style=\"color: #9CDCFE\">bookmark</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">data</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">content</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">id</span><span style=\"color: #569CD6\">}</span><span style=\"color: #CE9178\">`</span><span style=\"color: #D4D4D4\">)</span></div></code></div></pre>\n<ol start=\"6\">\n<li>What you do next with your array of URLs is up to you, personally I converted them into a bookmarks HTML file, by reverse engineering (to use the term lightly) Safari’s bookmark output (since Chrome wouldn’t export for some reason). It is essentially a HTML description list <code>&lt;dl&gt;</code> with a description term <code>&lt;dt&gt;</code> and anchor <code>&lt;a&gt;</code> for each link, with some boilerplate. I used VSCode’s multi-cursor feature to get it in the desired format.</li>\n</ol>\n",
      "date_published": "2021-09-08T00:00:00Z"
    },{
      "id": "https://www.andrewleedham.me/blog/posts/better-late-than-never/",
      "url": "https://www.andrewleedham.me/blog/posts/better-late-than-never/",
      "title": "Better Late than Never",
      "content_html": "<p>I have tried to create a blog many times in the past. But I always start by coming up with a really extravagant design, and build process, and tech stack, etc. etc. I always get bored part way through and ditch it... Therefore, I have decided to change tack and start with the content, and improve the actual site over-time.</p>\n<p>11ty seems like the best tool for the job, given it is very un-opinionated on front-end technologies and has great starter themes. Which works great with my vison of getting something going and starting to add content. It should hopefully provide a good base for experimentation as with any good personal site.</p>\n<p>So, that is why my blog is currently using the base eleventy theme. Not that there is anything wrong with that, I just plan to make it my own.</p>\n",
      "date_published": "2021-09-08T00:00:00Z"
    }
  ]
}
